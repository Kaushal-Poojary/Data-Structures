#include  <stdio.h>
#include  <stdlib.h>

struct node{
    int data;
    struct node *next;
};

struct node *tail=NULL;

void create()
{
    int i,size;
    printf("Enter the size of the list\n");
    scanf("%d",&size);
    for(i=0;i<size;i++)
    {
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        printf("Enter the value of node %d\n",i+1);
        scanf("%d",&newnode->data);
        newnode->next=NULL;
        if(tail==NULL)
        {
            tail=newnode;
            tail->next=newnode;
        }
        else
        {
            newnode->next=tail->next;
            tail->next=newnode;
            tail=newnode;            
        }
    }
}

void display()
{
    struct node *temp=tail->next;
    if(tail==NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        do{
            printf("%d ",temp->data);
            temp=temp->next;
        }while(temp != tail->next);
    }
}

void insert_at_beg()
{
    struct node *newnode=(struct node *)malloc(sizeof(struct node));
    printf("Enter the data you want to insert\n");
    scanf("%d",&newnode->data);
    printf("%d has been inserted\n",newnode->data);
    newnode->next=NULL;
    
    if(tail==NULL)
        {
            tail=newnode;
            tail->next=newnode;
        }
        else
        {
            newnode->next=tail->next;
            tail->next=newnode;
        }
}

void insert_at_end()
{
    struct node *newnode=(struct node *)malloc(sizeof(struct node));
    printf("Enter the data you want to insert\n");
    scanf("%d",&newnode->data);
    printf("%d has been inserted\n",newnode->data);
    newnode->next=NULL;
    
    if(tail==NULL)
        {
            tail=newnode;
            tail->next=newnode;
        }
        else
        {
            newnode->next=tail->next;
            tail->next=newnode;
            tail=newnode;
        }
}

void insert_at_pos()
{
    int pos,i=1;
    struct node *newnode=(struct node *)malloc(sizeof(struct node));
    struct node *temp;
    printf("Enter the position of the element to be inserted\n");
    scanf("%d",&pos);
    
    if(pos==1)
    {
        insert_at_beg();
    }
    else
    {
        printf("Enter the data you want to insert\n");
        scanf("%d",&newnode->data);
        printf("%d has been inserted\n",newnode->data);
        newnode->next=NULL;
        temp=tail->next;
        
        while(i < pos-1)
        {
            temp=temp->next;
            i++;
        }
        newnode->next=temp->next;
        temp->next=newnode;
    }
}

void insert_before_value()
{
    int c,d;
    struct node *newnode,*temp,*pretemp;
    newnode=(struct node *)malloc(sizeof(struct node));
    printf("Enter the value before which element is to be inserted\n");
    scanf("%d",&c);
    printf("Enter the data\n");
    scanf("%d",&d);
    newnode->data=d;
    printf("%d has been inserted\n",d);
    temp=tail->next;
    
    while(temp->data != c)
    {
        pretemp=temp;
        temp=temp->next;
    }
    pretemp->next=newnode;
    newnode->next=temp;
}

void insert_after_value()
{
    int c,d;
    struct node *newnode,*temp,*pretemp;
    newnode=(struct node *)malloc(sizeof(struct node));
    printf("Enter the value after which element is to be inserted\n");
    scanf("%d",&c);
    printf("Enter the data\n");
    scanf("%d",&d);
    newnode->data=d;
    printf("%d has been inserted\n",d);
    temp=tail->next;
    pretemp=temp;
    
    while(pretemp->data != c)
    {
        pretemp=temp;
        temp=temp->next;
    }
    pretemp->next=newnode;
    newnode->next=temp;
}

void delete_from_beg()
{
    struct node *temp=tail->next;
    if(tail==NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        tail->next=temp->next;
        printf("%d has been deleted\n",temp->data);
        free(temp);
    }
}

void delete_from_end()
{
    struct node *temp=tail->next;
    struct node *prev;
    
    if(tail==NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        while(temp->next != tail->next)
        {
            prev=temp;
            temp=temp->next;
        }
        tail=prev;
        tail->next=temp->next;
        printf("%d has been deleted\n",temp->data);
        free(temp);
    }
}

void delete_at_pos()
{
    int pos,i=1;
    struct node *del=(struct node *)malloc(sizeof(struct node));
    struct node *temp=tail->next;
    printf("Enter the position to be deleted\n");
    scanf("%d",&pos);
    
    if(pos == 1)
    {
        delete_from_beg();
    }
    else
    {
        while(i < pos-1)
        {
            temp=temp->next;
            i++;
        }
        del=temp->next;
        temp->next=del->next;
        free(del);
    }
}

void delete_value()
{
    int c;
    struct node *temp,*pretemp;
    printf("Enter the value to be deleted\n");
    scanf("%d",&c);
    temp=tail->next;
    
    if(tail==NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        while(temp->data != c)
        {
            pretemp=temp;
            temp=temp->next;
        }
        pretemp->next=temp->next;
        free(temp);
    }
}

void delete_before_value()
{
    int c;
    struct node *temp,*pretemp;
    printf("Enter the value before which deletion has to be done\n");
    scanf("%d",&c);
    temp=tail->next;
    
    if(tail==NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        while(temp->next->data != c)
        {
            pretemp=temp;
            temp=temp->next;
        }
        pretemp->next=temp->next;
        free(temp);
    }
}

void delete_after_value()
{
    int c;
    struct node *temp,*pretemp;
    printf("Enter the value after which deletion has to be done\n");
    scanf("%d",&c);
    temp=tail->next;
    pretemp=temp;
    
    if(tail==NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        while(pretemp->data != c)
        {
            pretemp=temp;
            temp=temp->next;
        }
        pretemp->next=temp->next;
        free(temp);
    }
}

void search()
{
    int a,i=1;
    struct node *temp=tail->next;
    printf("Enter the element to be searched\n");
    scanf("%d",&a);
    
    if(tail == NULL)
    {
        printf("Linked list is empty\n");
    }
    else
    {
        while(temp->data != a)
     {
        temp=temp->next;
        i++;
     }
    }
    printf("%d found at node %d\n",a,i);
}

void length()
{
    int count=0;
    struct node *temp=tail->next;
    
    if(tail == NULL)
    {
        printf("Linked list is empty\n");
    }
    else
    {
        do{
            temp=temp->next;
            count++;
        }while(temp != tail->next);
    }
    printf("Size of linked list is %d\n",count);
}

void update_at_pos()
{
    int c,d,i=1;
    struct node *temp=tail->next;
    printf("Enter the position to be updated\n");
    scanf("%d",&c);
    printf("Enter the value\n");
    scanf("%d",&d);
    
    while(i < c)
    {
        temp=temp->next;
        i++;
    }
    temp->data=d;
}

void update_before_value()
{
    int c,d;
    struct node *temp=tail->next;
    struct node *pretemp;
    printf("Enter the value before which updation has to be done\n");
    scanf("%d",&c);
    printf("Enter the value\n");
    scanf("%d",&d);
    pretemp=temp;
    
    while(temp->data != c)
    {
        pretemp=temp;
        temp=temp->next;
    }
    pretemp->data=d;
}

void update_after_value()
{
    int c,d;
    struct node *temp=tail->next;
    printf("Enter the value after which updation has to be done\n");
    scanf("%d",&c);
    printf("Enter the value\n");
    scanf("%d",&d);
    
    while(temp->data != c)
    {
        temp=temp->next;
    }
    temp->next->data=d;
}


int main()
{
    int oper;
    while(1)
    {
        printf("\nEnter the operation you want to perform\n");
        printf("1. Create a linked list\n");
        printf("2. Display\n");
        printf("3. Insert at beginning\n");
        printf("4. Insert at End\n");
        printf("5. Insert at a position\n");
        printf("6. Insert before a value\n");
        printf("7. Insert after a value\n");
        printf("8. Delete from beginning\n");
        printf("9. Delete from end\n");
        printf("10. Delete from a position\n");
        printf("11. Delete a value\n");
        printf("12. Delete before a value\n");
        printf("13. Delete after a value\n");
        printf("14. Search\n");
        printf("15. Length\n");
        printf("16. Update at a position\n");
        printf("17. Update before a value\n");
        printf("18. Update after a value\n");
        printf("0. Exit\n");
        scanf("%d",&oper);
        
        switch(oper)
        {
            case 1:
                create();
                break;
                
            case 2:
                display();
                break;
                
            case 3:
                insert_at_beg();
                break;
                
            case 4:
                insert_at_end();
                break;
                
            case 5:
                insert_at_pos();
                break;
                
            case 6:
                insert_before_value();
                break;
                
            case 7:
                insert_after_value();
                break;
                
            case 8:
                delete_from_beg();
                break;
                
            case 9:
                delete_from_end();
                break;
                
            case 10:
                delete_at_pos();
                break;
                
            case 11:
                delete_value();
                break;
                
            case 12:
                delete_before_value();
                break;
                
            case 13:
                delete_after_value();
                break;
                
            case 14:
                search();
                break;
                
            case 15:
                length();
                break;
                
            case 16:
                update_at_pos();
                break;
                
            case 17:
                update_before_value();
                break;
                
            case 18:
                update_after_value();
                break;
                
            case 0:
                exit(1);
                break;;
                
            default:
                printf("Enter valid operator\n");
        }
    }
        
  return 0;
}
